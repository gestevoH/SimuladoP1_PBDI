-- 1.1 Escreva um cursor que exiba as variáveis rank e youtuber de toda tupla que tiver
-- video_count pelo menos igual a 1000 e cuja category seja igual a Sports ou Music.

-- DO $$
-- DECLARE
-- 	cur_rank_youtuber CURSOR FOR SELECT rank, youtuber FROM tb_top_youtubers WHERE video_count >= 1000
-- 	AND category IN ('Sports', 'Music');
-- 	v_rank INT;
-- 	v_youtuber VARCHAR(200);
-- 	tupla RECORD;
-- 	resultado TEXT DEFAULT '';
-- BEGIN
-- 	OPEN cur_rank_youtuber;
-- 		FETCH cur_rank_youtuber INTO tupla;
-- 		WHILE FOUND LOOP
-- 			resultado := resultado || 'Rank: ' || tupla.rank || ',' || 'Youtuber: ' ||tupla.youtuber || '; ';
-- 			FETCH cur_rank_youtuber INTO tupla;
-- 			EXIT WHEN NOT FOUND;
-- 		END LOOP;
-- 	CLOSE cur_rank_youtuber;
-- 	RAISE NOTICE '%', resultado;
-- END;
-- $$

-- -- Outra forma de realizar a atividade:
-- DO $$
-- DECLARE
-- 	cur_rank_youtuber CURSOR FOR SELECT rank, youtuber FROM tb_top_youtubers WHERE video_count >= 1000
-- 	AND category IN ('Sports', 'Music');
-- 	v_rank INT;
-- 	v_youtuber VARCHAR(200);
-- BEGIN
-- 	OPEN cur_rank_youtuber;
-- 		LOOP
-- 			FETCH cur_rank_youtuber INTO v_rank, v_youtuber;
-- 			EXIT WHEN NOT FOUND;
-- 			RAISE NOTICE 'Rank: %, Youtuber: %', v_rank, v_youtuber;
-- 		END LOOP;
-- 	CLOSE cur_rank_youtuber;
-- END;
-- $$

--------------------------------------------------------------------------------------------------------------------------------------

-- 1.2 Escreva um cursor que exibe todos os nomes dos youtubers em ordem reversa. Para tal
-- O SELECT deverá ordenar em ordem não reversa
-- O Cursor deverá ser movido para a última tupla
-- Os dados deverão ser exibidos de baixo para cima

-- DO $$
-- DECLARE
-- cur_nome_youtubers REFCURSOR;
-- tupla RECORD;
-- BEGIN
-- -- scroll para poder voltar ao início
-- 	OPEN cur_nome_youtubers SCROLL FOR
-- 	SELECT youtuber
-- 	FROM
-- 	tb_top_youtubers;
-- 		LOOP
-- 			FETCH cur_nome_youtubers INTO tupla;
-- 			EXIT WHEN NOT FOUND;
-- 			IF tupla.youtuber IS NULL THEN
-- 			DELETE FROM tb_top_youtubers WHERE CURRENT OF cur_nome_youtubers;
-- 			END IF;
-- 		END LOOP;
-- -- loop para exibir item a item, de baixo para cima
-- 		LOOP
-- 			FETCH BACKWARD FROM cur_nome_youtubers INTO tupla;
-- 			EXIT WHEN NOT FOUND;
-- 			RAISE NOTICE '%', tupla;
-- 		END LOOP;
-- 	CLOSE cur_nome_youtubers;
-- END;
-- $$

-------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 1.3 Um comerciante comprou um produto e quer vendê-lo com um lucro de 45% se o valor da compra for menor que R$20. 
-- Caso contrário, ele deseja lucro de 30%. Faça um programa que, dado o valor do produto, calcula o valor de venda.

-- DO $$
-- DECLARE
-- 	v_valor_compra NUMERIC := 25;
-- 	v_valor_venda NUMERIC;
-- 	lucro NUMERIC;
-- BEGIN
-- 	IF v_valor_compra < 20 THEN
-- 		lucro := v_valor_compra * 0.45;
-- 		v_valor_venda := v_valor_compra + lucro;
-- 		RAISE NOTICE 'Valor para venda: %', v_valor_venda;
-- 	ELSE
-- 		lucro := v_valor_compra * 0.30;
-- 		v_valor_venda := v_valor_compra + lucro;
-- 		RAISE NOTICE 'Valor para venda: %', v_valor_venda;
-- 	END IF;
-- END;
-- $$

-----------------------------------------------------------------------------------------------------------------------------------------------------

-- 1.4 Escreva um programa que gere um inteiro que representa o ano de nascimento de uma pessoa no intervalo [1980, 2000] 
-- e gere um inteiro que representa o ano atual no intervalo[2010, 2020]. 
-- O programa deve exibir a idade da pessoa em anos. Desconsidere detalhes envolvendo dias, meses, anos bissextos etc.

-- DO $$
-- DECLARE
--     ano_nasc INT;
--     ano_atual INT;
--     lim_inferior_nasc INT := 1980;
--     lim_superior_nasc INT := 2000;
--     lim_inferior_atual INT := 2010;
--     lim_superior_atual INT := 2020;
--     idade INT;
-- BEGIN
--     ano_nasc := lim_inferior_nasc + floor(random() * (lim_superior_nasc - lim_inferior_nasc + 1));
--     ano_atual := lim_inferior_atual + floor(random() * (lim_superior_atual - lim_inferior_atual + 1));
--     idade := ano_atual - ano_nasc;
--     RAISE NOTICE 'Ano de Nascimento: %, Ano Atual: %, Idade em Anos: %', ano_nasc, ano_atual, idade;
-- END;
-- $$

----------------------------------------------------------------------------------------------------------------------------------------------------

-- 1.5  Resolva cada exercício a seguir usando LOOP, WHILE, FOR e FOREACH. Quando o
-- enunciado disser que é preciso “ler” algum valor, gere-o aleatoriamente. 
-- Gerar inteiros no intervalo de -50 a 50.
-- https://www.beecrowd.com.br/judge/pt/problems/view/1060
-- Gerar inteiros no intervalo de 20 a 50.
-- https://www.beecrowd.com.br/judge/pt/problems/view/1071

-- CREATE OR REPLACE FUNCTION valor_aleatorio_entre (lim_inferior INT, lim_superior
-- INT) RETURNS INT AS
-- $$
-- BEGIN
-- RETURN FLOOR(RANDOM() * (lim_superior - lim_inferior + 1) + lim_inferior)::INT;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Com FOR
-- DO $$
-- DECLARE
--     v_valor INT;
--     contador INT := 0;
-- BEGIN
--     FOR i IN 1..6 LOOP
--         v_valor := valor_aleatorio_entre(-50, 50);
--         RAISE NOTICE 'Valor da vez: %', v_valor;
--         IF v_valor > 0 THEN
--             contador := contador + 1;
--         END IF;
--     END LOOP;
--     RAISE NOTICE 'Positivos: %', contador;
-- END;
-- $$;

-- -- Com FOREACH
-- DO $$
-- DECLARE
-- 	v_valores INT[] := ARRAY[
-- 	valor_aleatorio_entre(-50, 50),
-- 	valor_aleatorio_entre(-50, 50),
-- 	valor_aleatorio_entre(-50, 50),
-- 	valor_aleatorio_entre(-50, 50),
-- 	valor_aleatorio_entre(-50, 50),
-- 	valor_aleatorio_entre(-50, 50)
-- 	];
-- 	v_valor INT;
-- 	contador INT := 0;
-- BEGIN
-- 	FOREACH v_valor IN ARRAY v_valores LOOP
-- 		RAISE NOTICE 'Valor da vez: %', v_valor;
-- 		IF v_valor > 0 THEN
-- 			contador := contador + 1;
-- 		END IF;
-- 	END LOOP;
-- 	RAISE NOTICE 'Positivos: %', contador;
-- END;
-- $$

-- -- Com LOOP
-- DO $$
-- DECLARE
-- 	v_valor INT;
-- 	contador INT := 0;
-- 	i INT := 1;
-- BEGIN
-- 	LOOP
-- 		EXIT WHEN i > 6;
-- 		v_valor := valor_aleatorio_entre(-50, 50);
-- 		RAISE NOTICE 'Valor da vez: %', v_valor;
-- 		IF v_valor > 0 THEN
-- 			contador := contador + 1;
-- 		END IF;
-- 		i := i + 1;
-- 	END LOOP;
-- 	RAISE NOTICE 'Positivos: %', contador;
-- END;
-- $$

-- -- Com WHILE
-- DO $$
-- DECLARE
-- 	v_valor INT;
-- 	contador INT := 0;
-- 	i INT := 1;
-- BEGIN
-- 	WHILE i<= 6 LOOP
-- 		v_valor := valor_aleatorio_entre(-50, 50);
-- 		RAISE NOTICE 'Valor da vez: %', v_valor;
-- 		IF v_valor > 0 THEN
-- 			contador := contador + 1;
-- 		END IF;
-- 		i := i + 1;
-- 	END LOOP;
-- 	RAISE NOTICE 'Positivos: %', contador;
-- END;
-- $$

